{"version":3,"file":"static/js/100.38c5e49c.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/singleItemPage/SingleItemPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resourses/img/Avengers.png';\r\nimport logo from '../../resourses/img/Avengers_logo.png'\r\n\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"appbanner\">\r\n            <div className=\"appbanner__block\">\r\n                <img src={avengers} alt=\"\" />\r\n                <div className=\"appbanner__text\">\r\n                New comics every week! <br />\r\n                Stay tuned!\r\n                </div>\r\n            </div>\r\n            <div className=\"appbanner__logo\"><img src={logo} alt=\"\" /></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error-img\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport useMarvelService from '../../../services/MarvelService';\r\nimport setContent from '../../../utils/setContent';\r\nimport AppBanner from '../../appBanner/AppBanner';\r\n\r\nimport './singleItemPage.scss';\r\n\r\nconst SingleItemPage = ({ dataType }) => {\r\n\r\n    const { id } = useParams();\r\n    const [data, setData] = useState(null);\r\n\r\n    const {getSingleComic, getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data);\r\n        setProcess('confirmed');\r\n    }\r\n\r\n    const getComic = () => {\r\n        clearError();\r\n        getSingleComic(id)\r\n            .then(onDataLoaded)\r\n    }\r\n\r\n    const getChar = () => {\r\n        clearError();\r\n        getCharacter(id, 'id')\r\n            .then(onDataLoaded)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (dataType === 'comics') {\r\n            getComic();\r\n        }\r\n        if (dataType === 'character') {\r\n            getChar();\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [id]);\r\n\r\n    const ComicPageLayout = ({data}) => {\r\n\r\n        const { thumbnail, title, description, pageCount, price, language } = data;\r\n\r\n        return (\r\n            <>  \r\n                <Helmet>\r\n                    <meta \r\n                        name=\"description\"\r\n                        content={`Page of ${title} comics`}/>\r\n                    <title>{title}</title>\r\n                </Helmet>\r\n                <img src={thumbnail} alt=\"comic\" />\r\n                <div className=\"singleItemPage__block\">\r\n                    <h2 className=\"singleItemPage__title\">{title}</h2>\r\n                    <p className=\"singleItemPage__text\">\r\n                        {description}\r\n                    </p>\r\n                    <p className=\"singleItemPage__pages\">{pageCount}</p>\r\n                    <p className=\"singleItemPage__lang\">Language: {language}</p>\r\n                    <p className=\"singleItemPage__price\">{price}</p>\r\n                    \r\n                </div>\r\n                {/* // eslint-disable-next-line */}\r\n                <Link to={'/comics'} className=\"singleItemPage__back\">back to all</Link>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const CharPageLayout = ({data}) => {\r\n\r\n        const { thumbnail, name, description} = data;\r\n\r\n        return (\r\n            <>\r\n                <Helmet>\r\n                    <meta \r\n                        name=\"description\"\r\n                        content={`Page of ${name}`}/>\r\n                    <title>{name}</title>\r\n                </Helmet>\r\n                <img src={thumbnail} alt=\"character\" />\r\n                <div className=\"singleItemPage__block\">\r\n                    <h2 className=\"singleItemPage__title\">{name}</h2>\r\n                    <p className=\"singleItemPage__text\">\r\n                        {description}\r\n                    </p>\r\n                </div>\r\n                <Link to={'/'} className=\"singleItemPage__back\">back to all</Link>\r\n            </>\r\n        )\r\n    }\r\n\r\n    let layout;\r\n    if (dataType === 'comics') {\r\n        layout = ComicPageLayout;\r\n    } else if (dataType === 'character') {\r\n        layout = CharPageLayout;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <div className=\"singleItemPage\">\r\n                {setContent(process, data, layout)}\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default SingleItemPage;","\r\n\r\nimport { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, error, request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=f09e10b3c42de2c120290b4a4f1abcf2';\r\n    const _baseCharOffset = 210;\r\n    const _baseComicsOffset = 500;\r\n\r\n    const getAllCharacters = async (charOffset = _baseCharOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${charOffset}&${_apiKey}`);\r\n        const totalCharacters = res.data.total;\r\n        return [totalCharacters, res.data.results.map(_transformCharacterData)];\r\n    }\r\n\r\n    const getCharacter = async (param, paramType) => {\r\n        let res;\r\n        if (paramType === 'id') {\r\n            res = await request(`${_apiBase}characters/${param}?${_apiKey}`);\r\n        } else if (paramType === 'name') {\r\n            res = await request(`${_apiBase}characters?name=${param}&${_apiKey}`);\r\n            if (res.data.total === 0) return {};\r\n        }\r\n        return _transformCharacterData(res.data.results[0]);\r\n    }\r\n\r\n\r\n    const getComics = async (comicsOffset = _baseComicsOffset) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${comicsOffset}&${_apiKey}`);\r\n        const totalComics = res.data.total;\r\n        return [totalComics, res.data.results.map(_transformComicsData)];\r\n    }\r\n\r\n    const getSingleComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComicsData(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComicsData = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    const _transformCharacterData = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getComics,\r\n        clearError,\r\n        getSingleComic,\r\n        process,\r\n        setProcess\r\n    }\r\n\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const res = await fetch(url, {method, body, headers});\r\n            if (!res.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${res.status}`); \r\n            }\r\n            const data = await res.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setProcess('error');\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('waiting');\r\n    }, [])\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        request,\r\n        clearError,\r\n        process,\r\n        setProcess\r\n    }\r\n}","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n\r\n\r\n return (\r\n    <div className=\"pulse skeleton\">\r\n        <div className=\"pulse skeleton__wrap\">\r\n            <h2 className=\"pulse skeleton__title\">Please select a character to see information</h2>\r\n            <div className=\"pulse skeleton__circle\"></div>\r\n            <div className=\"pulse skeleton__small\"></div>\r\n            <div className=\"pulse skeleton__big\"></div>\r\n            <div className=\"pulse skeleton__big\"></div>\r\n            <div className=\"pulse skeleton__big\"></div>\r\n        </div>\r\n    </div>\r\n     \r\n\r\n )\r\n}\r\n\r\nexport default Skeleton;","import Skeleton from '../components/skeleton/Skeleton';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Spinner from '../components/spinner/Spinner';\r\n\r\nconst setContent = (process, data, Component) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        default:\r\n            throw new Error('unexpected state')\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["className","src","avengers","alt","logo","style","display","width","height","objectFit","margin","img","dataType","id","useParams","useState","data","setData","useMarvelService","getSingleComic","getCharacter","clearError","process","setProcess","onDataLoaded","useEffect","then","layout","thumbnail","title","description","pageCount","price","language","Helmet","name","content","to","AppBanner","setContent","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","res","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","getAllCharacters","charOffset","totalCharacters","total","results","map","_transformCharacterData","param","paramType","getComics","comicsOffset","totalComics","_transformComicsData","comics","path","extension","textObjects","prices","char","slice","homepage","urls","wiki","items","Component","ErrorMessage","Spinner"],"sourceRoot":""}